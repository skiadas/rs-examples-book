<section xml:id="sec-HW6-1">
  <title>HW6</title>
  <introduction>
    <p dir="ltr">Lists</p>
  </introduction>
  <exercises>
    <exercise xml:id="exer-front_two-1">
      <title>Front Two</title>
      <statement>
        <p>Given a list, <c>L</c>, the function <c>front_two</c> creates a new list of length 2 out of the first two items in <c>L</c> as follows:</p>
        <p>
          <ul>
            <li>In the new list, the second item becomes the first item, and the first item becomes the second. </li>
            <li>If <c>L</c> contains only one item, the first item in the new list should be the value <c>None</c>. </li>
            <li>If <c>L</c> is empty, both items in the new list should be value <c>None</c>. </li>
            <li>The function returns the new list.</li>
          </ul>
        </p>
        <p />
      </statement>
      <program  label="31905" interactive="activecode" language="python">
        <input>_my_out = ""
_my_in = []

def getMyStdOut():
  global _my_out
  return _my_out

def setMyStdIn(s = None):
  global _my_in
  if s is None:
    _my_in = []
  else:
    _my_in = s.split('\n')
    _my_in.reverse()

def resetMyStdOut():
  global _my_out
  _my_out = ''

def print(*args, sep=' ', end='\n', file=None, flush=False):
  global _my_out
  if file is not None:
    raise RuntimeError("Cannot use this version of print on files")
  _my_out += sep.join(map(str, args)) + end

def input(prompt=None):
  global _my_in
  if prompt is not None:
    print(prompt, end='')
  if _my_in == []:
    raise EOFError()
  return _my_in.pop()





^^^^
def front_two(L):
        </input>
        <tests>



from unittest.gui import TestCaseGui

class myTests(TestCaseGui):



  def test1(self):
    resetMyStdOut()
    setMyStdIn('')

    L = ['a', 'b', 'c', 'd']
    print(front_two(L))

    self.assertEqual("['b', 'a']", getMyStdOut())


  def test2(self):
    resetMyStdOut()
    setMyStdIn('')

    L = ['one']
    print(front_two(L))

    self.assertEqual("[None, 'one']", getMyStdOut())


  def test3(self):
    resetMyStdOut()
    setMyStdIn('')

    L = []
    print(front_two(L))

    self.assertEqual('[None, None]', getMyStdOut())


  def test4(self):
    resetMyStdOut()
    setMyStdIn('')

    L = [5, 2]
    print(front_two(L))

    self.assertEqual('[2, 5]', getMyStdOut())


  def test5(self):
    resetMyStdOut()
    setMyStdIn('')

    L = [10, -14, 99, 35, 18, -10]
    print(front_two(L))

    self.assertEqual('[-14, 10]', getMyStdOut())


  def test6(self):
    resetMyStdOut()
    setMyStdIn('')

    L = [7]
    print(front_two(L))

    self.assertEqual('[None, 7]', getMyStdOut())



myTests().main()        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-func_print_items_reverse-1">
      <title>Print Reverse</title>
      <statement>
        <p>The function <c>print_reverse</c> takes one parameter, <c>L</c>, which is a list.  The function then prints the items in the list <alert>in reverse order</alert>, one item per line, <alert>WITHOUT changing the value of <c>L</c></alert>.</p>
        <p>Write the function definition.</p>
        <p>Note 1: This function does NOT get anything from standard input.</p>
        <p>Note 2: This function DOES, however, print to standard output.</p>
        <p>Note 3: You should NOT return anything from this function (let it return <c>None </c>by default).</p>
        <p>Hint: Some ideas for iterating over a list in reverse order are given <url href="https://thispointer.com/python-different-ways-to-iterate-over-a-list-in-reverse-order/">here</url>.</p>
      </statement>
      <program  label="31906" interactive="activecode" language="python">
        <input>_my_out = ""
_my_in = []

def getMyStdOut():
  global _my_out
  return _my_out

def setMyStdIn(s = None):
  global _my_in
  if s is None:
    _my_in = []
  else:
    _my_in = s.split('\n')
    _my_in.reverse()

def resetMyStdOut():
  global _my_out
  _my_out = ''

def print(*args, sep=' ', end='\n', file=None, flush=False):
  global _my_out
  if file is not None:
    raise RuntimeError("Cannot use this version of print on files")
  _my_out += sep.join(map(str, args)) + end

def input(prompt=None):
  global _my_in
  if prompt is not None:
    print(prompt, end='')
  if _my_in == []:
    raise EOFError()
  return _my_in.pop()





^^^^

        </input>
        <tests>



from unittest.gui import TestCaseGui

class myTests(TestCaseGui):



  def test1(self):
    resetMyStdOut()
    setMyStdIn('')

    L = ['apple', 'banana', 'cherry']
    Lcopy = L[:]
    return_value = print_reverse(L)
    if return_value != None or L != Lcopy:
        print("Error")

    self.assertEqual('cherry\nbanana\napple\n', getMyStdOut())


  def test2(self):
    resetMyStdOut()
    setMyStdIn('')

    L = ["hi", "howdy", "hola", "g'day", "bonjour"]
    Lcopy = L[:]
    return_value = print_reverse(L)
    if return_value != None or L != Lcopy:
        print("Error")

    self.assertEqual("bonjour\ng'day\nhola\nhowdy\nhi", getMyStdOut())


  def test3(self):
    resetMyStdOut()
    setMyStdIn('')

    L = [2, 4, 6, 8]
    Lcopy = L[:]
    return_value = print_reverse(L)
    if return_value != None or L != Lcopy:
        print("Error")

    self.assertEqual('8\n6\n4\n2', getMyStdOut())


  def test4(self):
    resetMyStdOut()
    setMyStdIn('')

    L = ['happy']
    Lcopy = L[:]
    return_value = print_reverse(L)
    if return_value != None or L != Lcopy:
        print("Error")

    self.assertEqual('happy\n', getMyStdOut())


  def test5(self):
    resetMyStdOut()
    setMyStdIn('')

    L = []
    Lcopy = L[:]
    return_value = print_reverse(L)
    if return_value != None or L != Lcopy:
        print("Error")

    self.assertEqual('', getMyStdOut())


  def test6(self):
    resetMyStdOut()
    setMyStdIn('')

    L = ['eanie', 'meanie', 'miney', 'mail', 'catch', 'a', 'python', 'by', 'its', 'TAIL']
    Lcopy = L[:]
    return_value = print_reverse(L)
    if return_value != None or L != Lcopy:
        print("Error")

    self.assertEqual('TAIL\nits\nby\npython\na\ncatch\nmail\nminey\nmeanie\neanie\n', getMyStdOut())



myTests().main()        </tests>
      </program>
    </exercise>
    <exercise xml:id="exer-count_contains_x-1">
      <title>Count Contains 'og'</title>
      <statement>
        <p>The function <c>count_contains_og </c>takes a list of strings and returns how many strings in the list contain 'og' / 'OG' / 'oG' / 'Og' (check for 'og', ignoring case).</p>
        <p><alert>Hint</alert>: Use the sequence membership operator <alert>in</alert> to help you check for 'og' in the individual strings. Create a <alert>lower-cased</alert> version of the string (<c>lower</c>), then use the <c>in</c> operator.</p>
      </statement>
      <program  label="32010" interactive="activecode" language="python">
        <input>_my_out = ""
_my_in = []

def getMyStdOut():
  global _my_out
  return _my_out

def setMyStdIn(s = None):
  global _my_in
  if s is None:
    _my_in = []
  else:
    _my_in = s.split('\n')
    _my_in.reverse()

def resetMyStdOut():
  global _my_out
  _my_out = ''

def print(*args, sep=' ', end='\n', file=None, flush=False):
  global _my_out
  if file is not None:
    raise RuntimeError("Cannot use this version of print on files")
  _my_out += sep.join(map(str, args)) + end

def input(prompt=None):
  global _my_in
  if prompt is not None:
    print(prompt, end='')
  if _my_in == []:
    raise EOFError()
  return _my_in.pop()





^^^^

        </input>
        <tests>



from unittest.gui import TestCaseGui

class myTests(TestCaseGui):



  def test1(self):
    resetMyStdOut()
    setMyStdIn('')

    str_list = ['cat', 'dog', 'FROG', 'monkey']
    print(count_contains_og(str_list))

    self.assertEqual('2', getMyStdOut())


  def test2(self):
    resetMyStdOut()
    setMyStdIn('')

    str_list = ['lOg', 'LoG', "FOGGY", "tree", "", "gogogo"]
    print(count_contains_og(str_list))

    self.assertEqual('4', getMyStdOut())


  def test3(self):
    resetMyStdOut()
    setMyStdIn('')

    strlist = ["X", "x"]
    print(count_contains_og(strlist))

    self.assertEqual('0\n', getMyStdOut())


  def test4(self):
    resetMyStdOut()
    setMyStdIn('')

    empty = []
    print(count_contains_og(empty))

    self.assertEqual('0', getMyStdOut())


  def test5(self):
    resetMyStdOut()
    setMyStdIn('')

    list_of_one = ["UNO"]
    print(count_contains_og(list_of_one))

    self.assertEqual('0', getMyStdOut())


  def test6(self):
    resetMyStdOut()
    setMyStdIn('')

    list_of_one_og = ["Doggie"]
    print(count_contains_og(list_of_one_og))

    self.assertEqual('1', getMyStdOut())


  def test7(self):
    resetMyStdOut()
    setMyStdIn('')

    L = ('DOG  '*10).split()
    print(count_contains_og(L))

    self.assertEqual('10\n', getMyStdOut())


  def test8(self):
    resetMyStdOut()
    setMyStdIn('')

    L = ['go', 'dogs', 'go', 'DOGS', 'GO', 'ods']
    print(count_contains_og(L))

    self.assertEqual('2', getMyStdOut())



myTests().main()        </tests>
      </program>
    </exercise>
  </exercises>
</section>
